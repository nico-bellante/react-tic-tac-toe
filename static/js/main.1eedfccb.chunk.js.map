{"version":3,"sources":["theme.ts","components/Cell.tsx","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["hue1","randomColor","hue2","COLORS","color1","bright","hue","luminosity","light","alpha","dark","color2","Cell","props","Wrapper","onClick","Text","style","color","state","styled","div","span","Game","N","Array","from","map","_","y","Row","x","disabled","undefined","takeCell","DEFAULT_STATE","App","useState","currentPlayer","setCurrentPlayer","setState","isXVictory","getIsVictory","isOVictoy","isVictory","isGameFinished","every","flatten","row","value","Header","visibility","marginBottom","marginTop","Container","coord","player","newState","cloneDeep","playTurn","Footer","PlayAgainButton","some","trim","FlexCenter","css","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1eedfccb.chunk.js","sourcesContent":["import randomColor from \"randomcolor\";\r\n\r\nconst hue1 = randomColor();\r\nconst hue2 = randomColor();\r\n\r\nexport const COLORS = {\r\n  color1: {\r\n    bright: randomColor({ hue: hue1, luminosity: \"bright\" }),\r\n    light: randomColor({ hue: hue1, luminosity: \"light\", alpha: 0.5 }),\r\n    dark: randomColor({ hue: hue1, luminosity: \"light\" }),\r\n  },\r\n  color2: {\r\n    bright: randomColor({ hue: hue2, luminosity: \"bright\" }),\r\n    light: randomColor({ hue: hue2, luminosity: \"light\" }),\r\n    dark: randomColor({ hue: hue2, luminosity: \"dark\" }),\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../theme\";\r\n\r\nexport type CellState = \"X\" | \"O\" | \" \";\r\n\r\nconst Cell = (props: { state: CellState; onClick?(): void }) => (\r\n  <Wrapper onClick={props.onClick}>\r\n    <Text\r\n      style={{ color: props.state === \"X\" ? COLORS.color1.dark : COLORS.color2.dark }}\r\n    >\r\n      {props.state}\r\n    </Text>\r\n  </Wrapper>\r\n);\r\n\r\nexport default Cell;\r\n\r\nconst Wrapper = styled.div`\r\n  width: 80px;\r\n  height: 80px;\r\n  border: 1px solid gray;\r\n  background: white;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  font-size: 56px;\r\n  font-weight: 700;\r\n  -webkit-text-stroke: 2px black;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { COLORS } from \"../theme\";\r\nimport Cell, { CellState } from \"./Cell\";\r\n\r\nconst Game = (props: {\r\n  disabled: boolean;\r\n  state: CellState[][];\r\n  takeCell(coord: Coordinate): void;\r\n}) => {\r\n  const N = Array.from(Array(3));\r\n  return (\r\n    <Wrapper>\r\n      {N.map((_, y) => (\r\n        <Row>\r\n          {N.map((_, x) => {\r\n            return (\r\n              <Cell\r\n                onClick={props.disabled ? undefined : () => props.takeCell({ x, y })}\r\n                state={props.state[y][x]}\r\n              ></Cell>\r\n            );\r\n          })}\r\n        </Row>\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\nexport default Game;\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid gray;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n","import React, { useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport { CellState } from \"./components/Cell\";\nimport Game from \"./components/Game\";\n\nimport { cloneDeep, every, flatten, some } from \"lodash\";\nimport { COLORS } from \"./theme\";\n\nconst DEFAULT_STATE: CellState[][] = [[\" \", \" \", \" \"], [\" \", \" \", \" \"], [\" \", \" \", \" \"]];\n\nconst App: React.FC = () => {\n  const [currentPlayer, setCurrentPlayer] = useState<Player>(\"X\");\n\n  const [state, setState] = useState(DEFAULT_STATE);\n  function playTurn(player: Player, { x, y }: Coordinate) {\n    if (state[y][x] === \" \") {\n      const newState = cloneDeep(state);\n      newState[y][x] = player;\n      setCurrentPlayer(currentPlayer === \"X\" ? \"O\" : \"X\");\n      setState(newState);\n    }\n  }\n\n  const isXVictory = getIsVictory(\"X\", state);\n  const isOVictoy = getIsVictory(\"O\", state);\n\n  const isVictory = isXVictory || isOVictoy;\n\n  const isGameFinished =\n    every(flatten(state.map(row => row.map(value => value !== \" \")))) || isVictory;\n\n  return (\n    <Wrapper>\n      <Header style={{ visibility: isGameFinished ? \"visible\" : \"hidden\" }}>\n        <h1 style={{ marginBottom: \"4px\" }}>GAME OVER</h1>\n        <h2\n          style={{\n            marginTop: \"4px\",\n            color: isXVictory ? COLORS.color1.dark : COLORS.color2.dark,\n          }}\n        >\n          {isVictory ? `${isXVictory ? \"X\" : \"O\"} has won the round!` : \"- DRAW -\"}\n        </h2>\n      </Header>\n\n      <Container>\n        <Game\n          disabled={isGameFinished}\n          state={state}\n          takeCell={coord => playTurn(currentPlayer, coord)}\n        />\n      </Container>\n      <Footer>\n        <PlayAgainButton\n          style={{ visibility: isGameFinished ? \"visible\" : \"hidden\" }}\n          onClick={() => setState(DEFAULT_STATE)}\n        >\n          <h3>Play Again?</h3>\n        </PlayAgainButton>\n      </Footer>\n    </Wrapper>\n  );\n};\n\nexport default App;\n\n///////////////////////////////\n\nfunction getIsVictory(player: Player, state: CellState[][]): boolean {\n  return some([\n    every(state[0].map(value => value.trim() && value === player)),\n    every(state[1].map(value => value.trim() && value === player)),\n    every(state[2].map(value => value.trim() && value === player)),\n    every(state.map(row => row[0].trim() && row[0] === player)),\n    every(state.map(row => row[1].trim() && row[1] === player)),\n    every(state.map(row => row[2].trim() && row[2] === player)),\n    player === state[0][0] && player === state[1][1] && player === state[2][2],\n    player === state[0][2] && player === state[1][1] && player === state[2][0],\n  ]);\n}\n\nconst FlexCenter = css`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Wrapper = styled.div`\n  ${FlexCenter}\n  height: 100vh;\n  background: ${COLORS.color2.light};\n  color: ${COLORS.color1.dark};\n`;\n\nconst Container = styled.div`\n  ${FlexCenter}\n  background: ${COLORS.color1.dark};\n  padding: 20px;\n  border-radius: 12px;\n`;\n\nconst Header = styled.div`\n  height: 200px\n  letter-spacing: 4px;\n  ${FlexCenter}\n  -webkit-text-stroke: 1px black;\n`;\n\nconst Footer = styled.div`\n  height: 200px;\n`;\n\nconst PlayAgainButton = styled.div`\n  ${FlexCenter}\n  background: ${COLORS.color1.dark};\n  color: #131313;\n  border-radius: 15px;\n  height: 60px;\n  width: 150px;\n  letter-spacing: 1px;\n  margin-top: 30px;\n\n  &:hover {\n    cursor: pointer;\n    background: ${COLORS.color1.bright};\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}